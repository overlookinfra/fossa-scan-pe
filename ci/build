#!/bin/bash
##
## ci build script for FOSSA analysis
##
## Reads "repo_list" file for list of repos to analyze
## Loads any repo-specific hook file for building before analysis
## Calls pre_build_hook, build_hook, and fossa_hook to perform local build and analysis
## Records results and print errors.
## Keeps a state file (on Artifactory) so repeated work isn't repeated. The state file
##   isn't required for operation; it is merely a time-saving convenience. Remove it from
##   Artifactory if it ever becomes corrupted
##
export WORKSPACE=${WORKSPACE:-$(pwd)}
export PATH="$PATH:$WORKSPACE/bin"
export GEM_SOURCE=https://artifactory.delivery.puppetlabs.net/artifactory/api/gems/rubygems/

git clean -ffdx

source /usr/local/rvm/scripts/rvm
rvm use 2.7.2

set -x

# Local directory definitions
target_binary_directory="$WORKSPACE/bin"
temporary_directory="$WORKSPACE/tmp"
hook_directory="$WORKSPACE/ci/hooks"

export BUNDLE_PATH="$temporary_directory/bundle/gems"
export BUNDLE_BIN="$temporary_directory/bundle/bin"


DEFAULT_LEIN_VERSION=2.9.5

# Local file definitions

pe_repo_list="$WORKSPACE/ci/pe_repo_list"
cloud_content_ci_repo_list="$WORKSPACE/ci/cloud-content-ci_repo-list"
# repo_lists=($pe_repo_list $cloud_content_ci_repo_list)
repo_lists=($cloud_content_ci_repo_list $pe_repo_list)

## Keep a git_sha file so that we don't do unneeded scans
git_sha_file_url=https://artifactory.delivery.puppetlabs.net/artifactory/scratchpad__local/fossa-scan-pe/git_sha_file.txt
original_git_sha_file_path="$temporary_directory/original_git_sha_file.txt"
updated_git_sha_file_path="$temporary_directory/git_sha_file.txt"
repos_in_error="$temporary_directory/repos_in_error"

# Retrieve the git_sha_file from Artifactory
function fetch_git_sha_file() {
  wget --quiet --tries=3 --output-document="$original_git_sha_file_path" "$git_sha_file_url"
  touch "$original_git_sha_file_path"
}

# Post an updated git_sha_file back to Artifactory
function upload_git_sha_file() {
  # ARTIFACTORY_API_TOKEN is a secret passed by Jenkins through the environment
  curl --header "X-JFrog-Art-Api:$ARTIFACTORY_API_TOKEN" \
       --upload-file "$updated_git_sha_file_path" \
       $git_sha_file_url
}

# Given a repo name, retrieve the stored git sha
function original_git_sha() {
  repo_name=$1
  grep "^$repo_name," "$original_git_sha_file_path" | awk -F, '{ print $2 }'
}

# Store a new git sha with a repo name into the git_sha file
function new_git_sha() {
  repo_name=$1
  git_sha=$2
  echo "$repo_name,$git_sha" >> "$updated_git_sha_file_path"
}

# Remove a git_sha from the git_sha_file. This is useful if we want to force re-testing
# in a future invocation.
function remove_git_sha() {
  repo_name=$1
  grep --fixed-strings --invert-match \
       "$repo_name," "$updated_git_sha_file_path" > "$updated_git_sha_file_path.new"
  mv "$updated_git_sha_file_path.new" "$updated_git_sha_file_path"
}

# Recurse through the current repo, doing a 'bundle install' wherever we find a Gemfile.
function bundle_install_everything() {
  original_directory=$(pwd)

  while read -r gemfile; do
    gemfile_directory=$(dirname "$gemfile")
    builtin cd "$gemfile_directory"
    if ! bundle install; then
      builtin cd "$original_directory"
      return 1
    fi
  done < <(find "$original_directory" -name Gemfile | grep --fixed-string --invert-match .bundle/)

  builtin cd "$original_directory"
}

## Set up lein if needed
function configure_lein() {
  lein_version=${1:-${DEFAULT_LEIN_VERSION}}

  if [[ -n $lein_version && -x /usr/local/bin/lein-$lein_version ]]; then
    export LEIN=/usr/local/bin/lein-$lein_version
    return
  fi

  : ===
  : === Info: Installing leiningen version "$lein_version"
  : ===
  lein_source_url=https://raw.githubusercontent.com/technomancy/leiningen/$lein_version/bin/lein
  lein_script_path="$target_binary_directory/lein"

  mkdir --parents "$target_binary_directory"
  curl --fail --insecure --location --output "$lein_script_path" "$lein_source_url"

  if [[ ! -r $lein_script_path ]]; then
    : === Error: lein curl "$lein_source_url" failed.
    exit 1
  fi

  chmod 755 "$lein_script_path"
  export LEIN="$lein_script_path"
}

function install_fossa_cli() {
  # This is the script that will install FOSSA binary locally
  # From https://github.com/fossas/fossa-cli
  fossa_install_script=https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh

  curl --header 'Cache-Control:no-cache' $fossa_install_script > \
       "$target_binary_directory"/install.sh
  /bin/bash "$target_binary_directory"/install.sh -b "$target_binary_directory"
  hash -r
}

function record_repo_error() {
  repo_url="$1"
  echo "$repo_url" >> "$repos_in_error"
  remove_git_sha "$repo_url"
}

mkdir --parents "$target_binary_directory"
mkdir --parents "$temporary_directory"

fetch_git_sha_file
install_fossa_cli

## Main loop. Process all the repos.
while read -r repo_url; do
  repo_basename="$(basename "$repo_url" .git)"
  repo_directory="$WORKSPACE/$repo_basename"
  hook_file="$hook_directory/$repo_basename"
  fossa_log="$temporary_directory/$repo_basename.log"

  : ===
  : === Info: Analyzing "$repo_url"
  : ===

  if ! git clone --recurse-submodules "$repo_url" "$repo_directory"; then
    : ===
    : === Error: Could not clone "$repo_url". Skipping.
    : ===
    record_repo_error "$repo_url"
    continue
  fi
  builtin cd "$repo_directory"

  current_sha=$(git rev-parse HEAD)
  former_sha=$(original_git_sha "$repo_url")
  new_git_sha "$repo_url" "$current_sha"
  if [[ "$current_sha" == "$former_sha" ]]; then
    : ===
    : === Info: No git changes in "$repo_url" since last run, no need to re-analyze.
    : ===
    continue
  fi

  # Set up default hooks
  source "$hook_directory/default"

  # Apply hook overrides
  if [[ -r "$hook_file" ]]; then
    : === Info: Using "$hook_file"
    source "$hook_file"
  fi

  pre_build_hook 2>&1 | tee --append "$fossa_log"
  if [[ ${PIPESTATUS[0]} != 0 ]]; then
    record_repo_error "$repo_url"
    continue
  fi

  build_hook 2>&1 | tee --append "$fossa_log"
  if [[ ${PIPESTATUS[0]} != 0 ]]; then
    record_repo_error "$repo_url"
    continue
  fi

  fossa_hook 2>&1 | tee --append "$fossa_log"
  if grep --silent "^FATAL " "$fossa_log"; then
    record_repo_error "$repo_url"
  fi
  builtin cd "$WORKSPACE"
done < <(grep --invert-match --no-filename '^#' ${repo_lists[@]})

upload_git_sha_file

if [[ ! -r "$repos_in_error" ]]; then
  exit 0
fi

set +x

echo "
=========================
Error Report
"
cat "$repos_in_error"
echo "========================="

while read -r repo_url; do
  echo "======  $repo_url: "
  cat "$temporary_directory/$(basename "$repo_url" .git).log"
  echo -e "\n\n"
done < "$repos_in_error"
exit 1
